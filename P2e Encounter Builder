#"working" but only run once... need to find where things are mucking up on reruns.

import random

class monster:
	def __init__(self, name, size, terrain, family, type, CR):
		self.name = name
		self.size = size
		self.terrain = terrain
		self.family = family
		self.type = type
		self.CR = CR
		
mVampBatSwarm = monster("Vampire bat swarm", "large", "any", "animal", "bat", 1)
mCaveBear = monster("Cavebear", "large", "any", "animal", "bear", 6)
mCentipedeSwarm = monster("Centipede swarm", "large", "any", "animal", "centipede", 3)
mGiantCentipede = monster("Giant Centipede", "medium", "any", "animal", "centipede", -1)
mGuardDog = monster("Guard Dog", "small", "any", "animal", "dog", -1)
mRidingDog = monster("Riding Dog", "medium", "any", "animal", "dog", 1)
mRidingHorse = monster("Riding Horse", "large", "any", "animal", "horse", 1)
mWarPony = monster("War Pony", "medium", "any", "animal", "horse", 1)
mGiantGecko = monster("Giant Gecko", "medium", "any", "animal", "lizard", 1)
mHuntingSpider = ("Hunting Spider", "medium", "any", "animal", "spider", 1)
mSpiderSwarm = monster("Spider swarm", "large", "any", "animal", "spider", 0)
mGiantTarantula = monster("Giant Tarantula", "large", "any", "animal", "spider", 6)
mGiantAnt = monster("Giant ant", "medium", "any", "animal", "ant", 2)
mGiantWhiptailCentipede = monster("Giant Whiptail Centipede", "huge", "any", "animal", "centipede", 3)
mTitanCentipede = monster("Titan centipede", "gargantuan", "any", "animal", "centipede", 9)
mCockroachSwarm = monster("Cockroach swarm", "large", "any", "animal", "cocroach", 2)
mGiantCockroach = monster("Giant cockroach", "small", "any", "animal", "cocroach", 1)
mGiantFly = monster("Giant fly", "medium", "any", "animal", "fly", 1)
mGiantMaggot = monster("Giant maggot", "medium", "any", "animal", "fly", 0)
mGiantMosquito = monster("Giant mosquito", "medium", "any", "animal", "mosquito", 6)
mRaven = monster("Raven", "tiny", "any", "animal", "raven", -1)
mRavenSwarm = monster("Raven swarm", "large", "any", "animal", "raven", 3)
mGiantSlug = monster("Giant slug", "Huge", "any", "animal", "slug", 8)
mSportleboreSwarm = monster("Sportlebore swarm", "large", "any", "animal", "sportlebore", 7)
mGiantTick = monster("Giant tick", "small", "any", "animal", "tick", 1)
mTickSwarm = monster("Tick swarm", "large", "any", "animal", "tick", 9)
mFadingFox = monster("Fading fox", "tiny", "any", "animal", "fox", 2)
mRedFox = monster("Red fox", "tiny", "any", "animal", "fox", -1)
mViperSwarm = monster("Viper swarm", "large", "any", "animal", "snake", 4)
mMegalictus = monster("Megalictus", "medium", "any", "animal", "weasel", 3)
mWeasel = monster("Weasel", "tiny", "any", "animal", "weasel", -1)

def user_input():

	global threatLevel
	global partyNumber
	global partyLevelModify
	global enemies #remember to global anything used by multiple blocks?
	global enemiesPartyVisual
	global partyLevel

	print('party level?')
	partyLevel = float(input())

	print('how many party members?')
	partyNumber = int(input())

	print("what threat level do you want? 1 is trivial, 2 is low, 3 is moderate, 4 is severe, 5 is extreme ")
	threatLevel = int(input())

	PartyLevelModify = float(1.0) #needs to be float

def budgeter():
	if (threatLevel == 1):
		xpBudget = 40
	elif (threatLevel == 2):
		xpBudget = 60
	elif (threatLevel ==3):
		xpBudget = 80
	elif (threatLevel == 4):
		xpBudget = 120
	else:
		xpBudget = 160
	partyNumberModify = (partyNumber / 4)
	if (threatLevel == 2):
		partyNumberModify = (partyNumber - 1) / 3
	xpBudget = (int((xpBudget / 10) * partyNumberModify)) * 10
	return(xpBudget)
	

def partyComp():

	x = int(budgeter())
	xPerm = x #if reference is needed
	x = x / 5
	y = partyLevel
	import random
	enemiesParty = []
	enemiesPartyVisual = []
	enemies = [2, 3, 4, 6, 8, 12, 16, 24, 32]
	number = True
	while number == True:
		monster = random.choice(enemies)
		x = x - int(monster)		
		if (x >= 2):
			enemiesParty.append(str(monster))
			number = True
		elif (x <0):
			x = x + monster	#refunds if negitive
		else:
			number = False
			enemiesParty.append(str(monster))
			for x in enemiesParty:
				if int(x) == 2:
					enemiesPartyVisual.append("PL-4")
				if int(x) == 3:
					enemiesPartyVisual.append("PL-3")
				if int(x) == 4:
					enemiesPartyVisual.append("PL-2")
				if int(x) == 6:
					enemiesPartyVisual.append("PL-1")
				if int(x) == 8:
					enemiesPartyVisual.append("PL")
				if int(x) == 12:
					enemiesPartyVisual.append("PL+1")
				if int(x) == 16:
					enemiesPartyVisual.append("PL+2")
				if int(x) == 24:
					enemiesPartyVisual.append("PL+3")
				if int(x) == 32:
					enemiesPartyVisual.append("PL+4")
			list.sort(enemiesPartyVisual)
			return enemiesPartyVisual
			#done generating party
			
def lootGen():

	
	if (threatLevel == 1):
		personalGoldReward = False
	elif (threatLevel == 2):
		personalGoldReward = 0
	elif (threatLevel ==3):
		personalGoldReward = 1
	elif (threatLevel == 4):
		personalGoldReward = 	2	
	elif (threatLevel == 5):
		personalGoldReward = 3
		
	#partyLevel
	#need formula for gold generation		
  #party level 1-20, need to find equation for gold table
  #build list? with each base and put through function for gold table equation with threat level choosing which four bases, trivial has none.
  #return amount of gold and subtract loot from value.
  
def monSort(x):
	desiredLevel= x
	allMons = []
	sortedMons = []

	allVariables = dict(globals(), **locals())
	
	for name, var in allVariables.items():
		if isinstance(var, monster):
			allMons.append(var) 
		for x in allMons:
			if int(getattr(x, "CR")) == int(desiredLevel):
				if x not in sortedMons:
					sortedMons.append(x)
	return sortedMons
	
	    #add to monster bank
	
def monPicker():
	global partyLevel
	monList = partyComp()
	monLevelList = []
	levelList = []
	#monChoices = monSort(x)
	partyNumber 
	for x in monList:
		if x == "PL-4":
			monLevelList.append(-4)
		if x == "PL-3":
			monLevelList.append(-3)
		if x == "PL-2":
			monLevelList.append(-2)
		if x == "PL-1":
			monLevelList.append(-1)
		if x == "PL":
			monLevelList.append(0)
		if x == "PL+1":
			monLevelList.append(1)
		if x == "PL+2":
			monLevelList.append(2)
		if x == "PL+3":
			monLevelList.append(3)
		if x == "PL+4":
			monLevelList.append(4)
	for x in monLevelList:
		levelList.append(random.choice((monSort(partyLevel + x))))
	for x in levelList:
		print(x.__dict__)
	
	

while 1 == 1: #to test with different inputs
	def main():
		user_input() 
		monPicker()#returns enemiesPartyVisual
		#monSort() #returns sortedMons
	main()
	


enviroments = ("any", "aquatic", "desert", "extraplaner", "forest", "hills", "jungle", "mountains", "plains", "swamp", "tundra", "underground", "urban")
families = ("aberration", "animal", "asteral", "beast", "celestial", "construct", "dragon", "dream", "elemental", "ethereal", "fey", "fiend", "fungus", "giant", "humanoid", "monitor", "ooze", "petitioner", "plant", "shadow", "spirit", "time", "undead")


"""

#use for loot generation
Level	Total Treasure per Level	Low	Moderate	Severe	Extreme	Extra Treasure
1	175 gp	13 gp	18 gp	26 gp	35 gp	35 gp
2	300 gp	23 gp	30 gp	45 gp	60 gp	60 gp
3	500 gp	38 gp	50 gp	75 gp	100 gp	100 gp
4	850 gp	65 gp	85 gp	130 gp	170 gp	170 gp
5	1,350 gp	100 gp	135 gp	200 gp	270 gp	270 gp
6	2,000 gp	150 gp	200 gp	300 gp	400 gp	400 gp
7	2,900 gp	220 gp	290 gp	440 gp	580 gp	580 gp
8	4,000 gp	300 gp	400 gp	600 gp	800 gp	800 gp
9	5,700 gp	430 gp	570 gp	860 gp	1,140 gp	1,140 gp
10	8,000 gp	600 gp	800 gp	1,200 gp	1,600 gp	1,600 gp
11	11,500 gp	865 gp	1,150 gp	1,725 gp	2,300 gp	2,300 gp
12	16,500 gp	1,250 gp	1,650 gp	2,475 gp	3,300 gp	3,300 gp
13	25,000 gp	1,875 gp	2,500 gp	3,750 gp	5,000 gp	5,000 gp
14	36,500 gp	2,750 gp	3,650 gp	5,500 gp	7,300 gp	7,300 gp
15	54,500 gp	4,100 gp	5,450 gp	8,200 gp	10,900 gp	10,900 gp
16	82,500 gp	6,200 gp	8,250 gp	12,400 gp	16,500 gp	16,500 gp
17	128,000 gp	9,600 gp	12,800 gp	19,200 gp	25,600 gp	25,600 gp
18	208,000 gp	15,600 gp	20,800 gp	31,200 gp	41,600 gp	41,600 gp
19	355,000 gp	26,600 gp	35,500 gp	53,250 gp	71,000 gp	71,000 gp
20	490,000 gp	36,800 gp	49,000 gp	73,500 gp	98,000 gp	98,000 gp

1, 175
10, 8000
20, 490000

1(490000-8000)+175(10-20)+(20*8000-10*490000)
---------------------------------------------
(1-10)(1-20)(10-20)

-4259750
--------   
-1710		

	NO GOOD FUNCTION... easier to insert full chart	


#trivial 0, 
#low is 7.5% round up, 
#moderate is 10%
#severe is 15%
#extreme is 20%

"""
